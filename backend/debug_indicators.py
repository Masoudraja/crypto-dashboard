#!/usr/bin/env python3
"""Debug script to check what indicator columns are generated by pandas_ta"""

import pandas as pd
import pandas_ta as ta
import psycopg2
from config import DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD, INDICATORS_CONFIG

def get_db_connection():
    try:
        return psycopg2.connect(host=DB_HOST, port=DB_PORT, dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD)
    except Exception as e:
        print(f"Database connection error: {e}")
        return None

def debug_indicator_columns():
    """Check what columns are generated for Bitcoin data"""
    conn = get_db_connection()
    if conn is None:
        return

    try:
        # Fetch Bitcoin historical data
        query = "SELECT timestamp, price_usd FROM crypto_prices WHERE coin_id = 'bitcoin' ORDER BY timestamp ASC LIMIT 100;"
        df = pd.read_sql_query(query, conn, params=(), index_col='timestamp')
        
        if df.empty:
            print("No data found for bitcoin")
            return
            
        df.rename(columns={'price_usd': 'close'}, inplace=True)
        
        print(f"Original columns: {df.columns.tolist()}")
        print(f"Data shape: {df.shape}")
        
        # Add required columns for advanced indicators
        df['high'] = df['close'] * 1.001
        df['low'] = df['close'] * 0.999
        df['volume'] = 1000000
        
        print("\n=== Calculating SMA indicators ===")
        for period in INDICATORS_CONFIG['sma']:
            df.ta.sma(close=df['close'], length=period, append=True)
        print(f"After SMA: {[col for col in df.columns if 'SMA' in col]}")
        
        print("\n=== Calculating EMA indicators ===")
        for period in INDICATORS_CONFIG['ema']:
            df.ta.ema(close=df['close'], length=period, append=True)
        print(f"After EMA: {[col for col in df.columns if 'EMA' in col]}")
        
        print("\n=== Calculating RSI indicators ===")
        for period in INDICATORS_CONFIG['rsi']:
            df.ta.rsi(close=df['close'], length=period, append=True)
        print(f"After RSI: {[col for col in df.columns if 'RSI' in col]}")
        
        print("\n=== Calculating MACD indicators ===")
        for fast, slow, signal in INDICATORS_CONFIG['macd']:
            df.ta.macd(close=df['close'], fast=fast, slow=slow, signal=signal, append=True)
        print(f"After MACD: {[col for col in df.columns if 'MACD' in col]}")
        
        print("\n=== Calculating Bollinger Bands ===")
        for period in INDICATORS_CONFIG['bbands']:
            df.ta.bbands(close=df['close'], length=period, append=True)
        print(f"After BB: {[col for col in df.columns if 'BB' in col]}")
        
        print("\n=== Calculating Stochastic RSI ===")
        if len(df) >= 20:
            for period in INDICATORS_CONFIG['stoch_rsi']:
                df.ta.stochrsi(close=df['close'], length=period, append=True)
            print(f"After StochRSI: {[col for col in df.columns if 'STOCHRSI' in col or 'STOCH' in col]}")
        
        print("\n=== Calculating Williams %R ===")
        if len(df) >= 20:
            for period in INDICATORS_CONFIG['williams_r']:
                willr_result = df.ta.willr(high=df['high'], low=df['low'], close=df['close'], length=period)
                if willr_result is not None:
                    df[f'WR_{period}'] = willr_result
            print(f"After Williams %R: {[col for col in df.columns if 'WR' in col or 'WILLR' in col]}")
        
        print("\n=== Calculating CCI ===")
        if len(df) >= 20:
            for period in INDICATORS_CONFIG['cci']:
                cci_result = df.ta.cci(high=df['high'], low=df['low'], close=df['close'], length=period)
                if cci_result is not None:
                    df[f'CCI_{period}'] = cci_result
            print(f"After CCI: {[col for col in df.columns if 'CCI' in col]}")
        
        print("\n=== Calculating ATR ===")
        if len(df) >= 20:
            for period in INDICATORS_CONFIG['atr']:
                atr_result = df.ta.atr(high=df['high'], low=df['low'], close=df['close'], length=period)
                if atr_result is not None:
                    df[f'ATR_{period}'] = atr_result
            print(f"After ATR: {[col for col in df.columns if 'ATR' in col]}")
        
        print("\n=== Calculating Parabolic SAR ===")
        if len(df) >= 20:
            for acceleration, maximum in INDICATORS_CONFIG['parabolic_sar']:
                psar_result = df.ta.psar(high=df['high'], low=df['low'], close=df['close'], af=acceleration, max_af=maximum)
                if psar_result is not None and not psar_result.empty:
                    print(f"PSAR result columns: {psar_result.columns.tolist()}")
                    for col in psar_result.columns:
                        df[col] = psar_result[col]
            print(f"After PSAR: {[col for col in df.columns if 'PSAR' in col]}")
        
        print("\n=== ALL FINAL COLUMNS ===")
        all_cols = df.columns.tolist()
        for i, col in enumerate(all_cols):
            print(f"{i+1:3d}. {col}")
        
        print(f"\n=== SAMPLE VALUES FROM LATEST ROW ===")
        latest = df.iloc[-1]
        for col in sorted(df.columns):
            if col not in ['close', 'high', 'low', 'volume']:
                val = latest[col]
                if pd.notna(val):
                    print(f"{col:<25}: {val}")
                else:
                    print(f"{col:<25}: NULL")
        
    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    debug_indicator_columns()